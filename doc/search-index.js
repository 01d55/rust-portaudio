var searchIndex = {}; var allPaths = {};
searchIndex['portaudio'] = [{ty:"mod",name:"",path:"portaudio",desc:"# Rust-PortAudio"},{ty:"mod",name:"types",path:"portaudio",desc:"Types used in the PortAudio API"},{ty:"struct",name:"PaHostApiInfo",path:"portaudio::types",desc:"A structure containing information about a particular host API."},{ty:"structfield",name:"struct_version",path:"portaudio::types",desc:"The version of the struct",parent:'14730'},{ty:"structfield",name:"host_type",path:"portaudio::types",desc:"The type of the current host",parent:'14730'},{ty:"structfield",name:"name",path:"portaudio::types",desc:"The name of the host",parent:'14730'},{ty:"structfield",name:"device_count",path:"portaudio::types",desc:"The total count of device in the host",parent:'14730'},{ty:"structfield",name:"default_input_device",path:"portaudio::types",desc:"The index to the default input device",parent:'14730'},{ty:"structfield",name:"default_output_device",path:"portaudio::types",desc:"The index to the default output device",parent:'14730'},{ty:"struct",name:"PaHostErrorInfo",path:"portaudio::types",desc:"Structure used to return information about a host error condition."},{ty:"structfield",name:"error_code",path:"portaudio::types",desc:"The code of the error",parent:'14839'},{ty:"structfield",name:"error_text",path:"portaudio::types",desc:"The string which explain the error",parent:'14839'},{ty:"struct",name:"PaDeviceInfo",path:"portaudio::types",desc:"A structure providing information and capabilities of PortAudio devices.\nDevices may support input, output or both input and output."},{ty:"structfield",name:"struct_version",path:"portaudio::types",desc:"The version of the struct",parent:'15366'},{ty:"structfield",name:"name",path:"portaudio::types",desc:"The name of the devie",parent:'15366'},{ty:"structfield",name:"host_api",path:"portaudio::types",desc:"Host API identifier",parent:'15366'},{ty:"structfield",name:"max_input_channels",path:"portaudio::types",desc:"Maximal number of input channels for this device",parent:'15366'},{ty:"structfield",name:"max_output_channels",path:"portaudio::types",desc:"maximal number of output channel for this device",parent:'15366'},{ty:"structfield",name:"default_low_input_latency",path:"portaudio::types",desc:"The default low latency for input with this device",parent:'15366'},{ty:"structfield",name:"default_low_output_latency",path:"portaudio::types",desc:"The default low latency for output with this device",parent:'15366'},{ty:"structfield",name:"default_high_input_latency",path:"portaudio::types",desc:"The default high latency for input with this device",parent:'15366'},{ty:"structfield",name:"default_high_output_latency",path:"portaudio::types",desc:"The default high latency for output with this device",parent:'15366'},{ty:"structfield",name:"default_sample_rate",path:"portaudio::types",desc:"The default sample rate for this device",parent:'15366'},{ty:"struct",name:"PaStreamParameters",path:"portaudio::types",desc:"Parameters for one direction (input or output) of a stream."},{ty:"structfield",name:"device",path:"portaudio::types",desc:"Index of the device",parent:'16997'},{ty:"structfield",name:"channel_count",path:"portaudio::types",desc:"The number of channels for this device",parent:'16997'},{ty:"structfield",name:"sample_format",path:"portaudio::types",desc:"Sample format of the device",parent:'16997'},{ty:"structfield",name:"suggested_latency",path:"portaudio::types",desc:"The suggested latency for this device",parent:'16997'},{ty:"struct",name:"PaStreamInfo",path:"portaudio::types",desc:"A structure containing unchanging information about an open stream."},{ty:"structfield",name:"struct_version",path:"portaudio::types",desc:"Struct version",parent:'17807'},{ty:"structfield",name:"input_latency",path:"portaudio::types",desc:"The input latency for this open stream",parent:'17807'},{ty:"structfield",name:"output_latency",path:"portaudio::types",desc:"The output latency for this open stream",parent:'17807'},{ty:"structfield",name:"sample_rate",path:"portaudio::types",desc:"The sample rate for this open stream",parent:'17807'},{ty:"enum",name:"PaSampleFormat",path:"portaudio::types",desc:"A type used to specify one or more sample formats."},{ty:"variant",name:"PaFloat32",path:"portaudio::types",desc:"32 bits float sample format",parent:'32'},{ty:"variant",name:"PaInt32",path:"portaudio::types",desc:"32 bits int sample format",parent:'32'},{ty:"variant",name:"PaInt16",path:"portaudio::types",desc:"16 bits int sample format",parent:'32'},{ty:"variant",name:"PaInt8",path:"portaudio::types",desc:"8 bits int sample format",parent:'32'},{ty:"variant",name:"PaUInt8",path:"portaudio::types",desc:"8 bits unsigned int sample format",parent:'32'},{ty:"variant",name:"PaCustomFormat",path:"portaudio::types",desc:"Custom sample format",parent:'32'},{ty:"variant",name:"PaNonInterleaved",path:"portaudio::types",desc:"Non interleaved sample format",parent:'32'},{ty:"enum",name:"PaStreamFlags",path:"portaudio::types",desc:"The flags to pass to a stream"},{ty:"variant",name:"PaNoFlag",path:"portaudio::types",desc:"No flags",parent:'1137'},{ty:"variant",name:"PaClipOff",path:"portaudio::types",desc:"Disable default clipping of out of range samples.",parent:'1137'},{ty:"variant",name:"PaDitherOff",path:"portaudio::types",desc:"Disable default dithering.",parent:'1137'},{ty:"variant",name:"PaNeverDropInput",path:"portaudio::types",desc:"Flag requests that where possible a full duplex stream will not discard overflowed input samples without calling the stream callback.",parent:'1137'},{ty:"variant",name:"PaPrimeOutputBuffersUsingStreamCallback",path:"portaudio::types",desc:"Call the stream callback to fill initial output buffers, rather than the default behavior of priming the buffers with zeros (silence)",parent:'1137'},{ty:"variant",name:"PaPlatformSpecificFlags",path:"portaudio::types",desc:"A mask specifying the platform specific bits.",parent:'1137'},{ty:"enum",name:"PaError",path:"portaudio::types",desc:"Error codes returned by PortAudio functions."},{ty:"variant",name:"PaNoError",path:"portaudio::types",desc:"No Error",parent:'2073'},{ty:"variant",name:"PaNotInitialized",path:"portaudio::types",desc:"Portaudio not initialized",parent:'2073'},{ty:"variant",name:"PaUnanticipatedHostError",path:"portaudio::types",desc:"Unanticipated error from the host",parent:'2073'},{ty:"variant",name:"PaInvalidChannelCount",path:"portaudio::types",desc:"Invalid channel count",parent:'2073'},{ty:"variant",name:"PaInvalidSampleRate",path:"portaudio::types",desc:"Invalid sample rate",parent:'2073'},{ty:"variant",name:"PaInvalidDevice",path:"portaudio::types",desc:"Invalid Device",parent:'2073'},{ty:"variant",name:"PaInvalidFlag",path:"portaudio::types",desc:"Invalid Flag",parent:'2073'},{ty:"variant",name:"PaSampleFormatNotSupported",path:"portaudio::types",desc:"The Sample format is not supported",parent:'2073'},{ty:"variant",name:"PaBadIODeviceCombination",path:"portaudio::types",desc:"Input device not compatible with output device",parent:'2073'},{ty:"variant",name:"PaInsufficientMemory",path:"portaudio::types",desc:"Memory insufficient",parent:'2073'},{ty:"variant",name:"PaBufferTooBig",path:"portaudio::types",desc:"The buffer is too big",parent:'2073'},{ty:"variant",name:"PaBufferTooSmall",path:"portaudio::types",desc:"The buffer is too small",parent:'2073'},{ty:"variant",name:"PaNullCallback",path:"portaudio::types",desc:"Invalid callback",parent:'2073'},{ty:"variant",name:"PaBadStreamPtr",path:"portaudio::types",desc:"Invalid Stream",parent:'2073'},{ty:"variant",name:"PaTimedOut",path:"portaudio::types",desc:"Time out",parent:'2073'},{ty:"variant",name:"PaInternalError",path:"portaudio::types",desc:"Portaudio internal error",parent:'2073'},{ty:"variant",name:"PaDeviceUnavailable",path:"portaudio::types",desc:"Device unavailable",parent:'2073'},{ty:"variant",name:"PaIncompatibleHostApiSpecificStreamInfo",path:"portaudio::types",desc:"Stream info not compatible with the host",parent:'2073'},{ty:"variant",name:"PaStreamIsStopped",path:"portaudio::types",desc:"The stream is stopped",parent:'2073'},{ty:"variant",name:"PaStreamIsNotStopped",path:"portaudio::types",desc:"The stream is not stopped",parent:'2073'},{ty:"variant",name:"PaInputOverflowed",path:"portaudio::types",desc:"The input stream has overflowed",parent:'2073'},{ty:"variant",name:"PaOutputUnderflowed",path:"portaudio::types",desc:"The output has overflowed",parent:'2073'},{ty:"variant",name:"PaHostApiNotFound",path:"portaudio::types",desc:"The host API is not found by Portaudio",parent:'2073'},{ty:"variant",name:"PaInvalidHostApi",path:"portaudio::types",desc:"The host API is invalid",parent:'2073'},{ty:"variant",name:"PaCanNotReadFromACallbackStream",path:"portaudio::types",desc:"Portaudio cannot read from the callback stream",parent:'2073'},{ty:"variant",name:"PaCanNotWriteToACallbackStream",path:"portaudio::types",desc:"Portaudio cannot wrtie to the callback stream",parent:'2073'},{ty:"variant",name:"PaCanNotReadFromAnOutputOnlyStream",path:"portaudio::types",desc:"Portaudio cannot read from an output only stream",parent:'2073'},{ty:"variant",name:"PaCanNotWriteToAnInputOnlyStream",path:"portaudio::types",desc:"Portaudio cannot write to an input only stream",parent:'2073'},{ty:"variant",name:"PaIncompatibleStreamHostApi",path:"portaudio::types",desc:"The stream is not compatible with the host API",parent:'2073'},{ty:"variant",name:"PaBadBufferPtr",path:"portaudio::types",desc:"Invalid buffer",parent:'2073'},{ty:"enum",name:"PaHostApiTypeId",path:"portaudio::types",desc:"Unchanging unique identifiers for each supported host API"},{ty:"variant",name:"PaInDevelopment",path:"portaudio::types",desc:"In development host",parent:'11868'},{ty:"variant",name:"PaDirectSound",path:"portaudio::types",desc:"Direct sound",parent:'11868'},{ty:"variant",name:"PaMME",path:"portaudio::types",desc:"MMe API",parent:'11868'},{ty:"variant",name:"PaASIO",path:"portaudio::types",desc:"ASIO API",parent:'11868'},{ty:"variant",name:"PaSoundManager",path:"portaudio::types",desc:"Sound manager API",parent:'11868'},{ty:"variant",name:"PaCoreAudio",path:"portaudio::types",desc:"Core Audio API",parent:'11868'},{ty:"variant",name:"PaOSS",path:"portaudio::types",desc:"OSS API",parent:'11868'},{ty:"variant",name:"PaALSA",path:"portaudio::types",desc:"Alsa API",parent:'11868'},{ty:"variant",name:"PaAL",path:"portaudio::types",desc:"AL API",parent:'11868'},{ty:"variant",name:"PaBeOS",path:"portaudio::types",desc:"BeOS API",parent:'11868'},{ty:"variant",name:"PaWDMKS",path:"portaudio::types",desc:"WDMKS",parent:'11868'},{ty:"variant",name:"PaJACK",path:"portaudio::types",desc:"Jack API",parent:'11868'},{ty:"variant",name:"PaWASAPI",path:"portaudio::types",desc:"WASAPI",parent:'11868'},{ty:"variant",name:"PaAudioScienceHPI",path:"portaudio::types",desc:"Audio Science HPI",parent:'11868'},{ty:"typedef",name:"PaDeviceIndex",path:"portaudio::types",desc:"The type used to refer to audio devices. Values of this type usually range\nfrom 0 to (pa::get_device_count()-1)"},{ty:"typedef",name:"PaHostApiIndex",path:"portaudio::types",desc:"The type used to enumerate to host APIs at runtime.\nValues of this type range from 0 to (pa::get_host_api_count()-1)."},{ty:"typedef",name:"PaTime",path:"portaudio::types",desc:"The type used to represent monotonic time in seconds."},{ty:"static",name:"PaNoDevice",path:"portaudio::types",desc:"A special PaDeviceIndex value indicating that no device is available,\nor should be used."},{ty:"static",name:"PaUseHostApiSpecificDeviceSpecification",path:"portaudio::types",desc:"A special PaDeviceIndex value indicating that the device(s) to be used are\nspecified in the host api specific stream info structure."},{ty:"method",name:"fmt",path:"portaudio::types",desc:"",parent:'32'},{ty:"method",name:"lt",path:"portaudio::types",desc:"",parent:'32'},{ty:"method",name:"le",path:"portaudio::types",desc:"",parent:'32'},{ty:"method",name:"gt",path:"portaudio::types",desc:"",parent:'32'},{ty:"method",name:"ge",path:"portaudio::types",desc:"",parent:'32'},{ty:"method",name:"eq",path:"portaudio::types",desc:"",parent:'32'},{ty:"method",name:"ne",path:"portaudio::types",desc:"",parent:'32'},{ty:"method",name:"clone",path:"portaudio::types",desc:"",parent:'32'},{ty:"method",name:"fmt",path:"portaudio::types",desc:"",parent:'1137'},{ty:"method",name:"lt",path:"portaudio::types",desc:"",parent:'1137'},{ty:"method",name:"le",path:"portaudio::types",desc:"",parent:'1137'},{ty:"method",name:"gt",path:"portaudio::types",desc:"",parent:'1137'},{ty:"method",name:"ge",path:"portaudio::types",desc:"",parent:'1137'},{ty:"method",name:"eq",path:"portaudio::types",desc:"",parent:'1137'},{ty:"method",name:"ne",path:"portaudio::types",desc:"",parent:'1137'},{ty:"method",name:"clone",path:"portaudio::types",desc:"",parent:'1137'},{ty:"method",name:"fmt",path:"portaudio::types",desc:"",parent:'2073'},{ty:"method",name:"lt",path:"portaudio::types",desc:"",parent:'2073'},{ty:"method",name:"le",path:"portaudio::types",desc:"",parent:'2073'},{ty:"method",name:"gt",path:"portaudio::types",desc:"",parent:'2073'},{ty:"method",name:"ge",path:"portaudio::types",desc:"",parent:'2073'},{ty:"method",name:"eq",path:"portaudio::types",desc:"",parent:'2073'},{ty:"method",name:"ne",path:"portaudio::types",desc:"",parent:'2073'},{ty:"method",name:"clone",path:"portaudio::types",desc:"",parent:'2073'},{ty:"method",name:"fmt",path:"portaudio::types",desc:"",parent:'11868'},{ty:"method",name:"lt",path:"portaudio::types",desc:"",parent:'11868'},{ty:"method",name:"le",path:"portaudio::types",desc:"",parent:'11868'},{ty:"method",name:"gt",path:"portaudio::types",desc:"",parent:'11868'},{ty:"method",name:"ge",path:"portaudio::types",desc:"",parent:'11868'},{ty:"method",name:"eq",path:"portaudio::types",desc:"",parent:'11868'},{ty:"method",name:"ne",path:"portaudio::types",desc:"",parent:'11868'},{ty:"method",name:"clone",path:"portaudio::types",desc:"",parent:'11868'},{ty:"method",name:"fmt",path:"portaudio::types",desc:"",parent:'14839'},{ty:"method",name:"lt",path:"portaudio::types",desc:"",parent:'14839'},{ty:"method",name:"le",path:"portaudio::types",desc:"",parent:'14839'},{ty:"method",name:"gt",path:"portaudio::types",desc:"",parent:'14839'},{ty:"method",name:"ge",path:"portaudio::types",desc:"",parent:'14839'},{ty:"method",name:"eq",path:"portaudio::types",desc:"",parent:'14839'},{ty:"method",name:"ne",path:"portaudio::types",desc:"",parent:'14839'},{ty:"method",name:"clone",path:"portaudio::types",desc:"",parent:'14839'},{ty:"method",name:"fmt",path:"portaudio::types",desc:"",parent:'15366'},{ty:"method",name:"lt",path:"portaudio::types",desc:"",parent:'15366'},{ty:"method",name:"le",path:"portaudio::types",desc:"",parent:'15366'},{ty:"method",name:"gt",path:"portaudio::types",desc:"",parent:'15366'},{ty:"method",name:"ge",path:"portaudio::types",desc:"",parent:'15366'},{ty:"method",name:"eq",path:"portaudio::types",desc:"",parent:'15366'},{ty:"method",name:"ne",path:"portaudio::types",desc:"",parent:'15366'},{ty:"method",name:"clone",path:"portaudio::types",desc:"",parent:'15366'},{ty:"method",name:"fmt",path:"portaudio::types",desc:"",parent:'16997'},{ty:"method",name:"lt",path:"portaudio::types",desc:"",parent:'16997'},{ty:"method",name:"le",path:"portaudio::types",desc:"",parent:'16997'},{ty:"method",name:"gt",path:"portaudio::types",desc:"",parent:'16997'},{ty:"method",name:"ge",path:"portaudio::types",desc:"",parent:'16997'},{ty:"method",name:"eq",path:"portaudio::types",desc:"",parent:'16997'},{ty:"method",name:"ne",path:"portaudio::types",desc:"",parent:'16997'},{ty:"method",name:"clone",path:"portaudio::types",desc:"",parent:'16997'},{ty:"method",name:"fmt",path:"portaudio::types",desc:"",parent:'17807'},{ty:"method",name:"lt",path:"portaudio::types",desc:"",parent:'17807'},{ty:"method",name:"le",path:"portaudio::types",desc:"",parent:'17807'},{ty:"method",name:"gt",path:"portaudio::types",desc:"",parent:'17807'},{ty:"method",name:"ge",path:"portaudio::types",desc:"",parent:'17807'},{ty:"method",name:"eq",path:"portaudio::types",desc:"",parent:'17807'},{ty:"method",name:"ne",path:"portaudio::types",desc:"",parent:'17807'},{ty:"method",name:"clone",path:"portaudio::types",desc:"",parent:'17807'},{ty:"mod",name:"pa",path:"portaudio",desc:"The portable PortAudio API."},{ty:"struct",name:"PaStream",path:"portaudio::pa",desc:"Representation of an audio stream, where the format of the stream is defined\nby the S parameter."},{ty:"structfield",name:"c_pa_stream",path:"portaudio::pa",desc:"",parent:'18843'},{ty:"structfield",name:"sample_format",path:"portaudio::pa",desc:"",parent:'18843'},{ty:"structfield",name:"c_input",path:"portaudio::pa",desc:"",parent:'18843'},{ty:"structfield",name:"c_output",path:"portaudio::pa",desc:"",parent:'18843'},{ty:"structfield",name:"unsafe_buffer",path:"portaudio::pa",desc:"",parent:'18843'},{ty:"structfield",name:"callback_function",path:"portaudio::pa",desc:"",parent:'18843'},{ty:"structfield",name:"num_input_channels",path:"portaudio::pa",desc:"",parent:'18843'},{ty:"fn",name:"get_version",path:"portaudio::pa",desc:"Retrieve the release number of the currently running PortAudio build."},{ty:"fn",name:"get_version_text",path:"portaudio::pa",desc:"Retrieve a textual description of the current PortAudio build."},{ty:"fn",name:"get_error_text",path:"portaudio::pa",desc:"Translate the supplied PortAudio error code into a human readable message."},{ty:"fn",name:"initialize",path:"portaudio::pa",desc:"Library initialization function - call this before using PortAudio.\nThis function initializes internal data structures and prepares underlying\nhost APIs for use. With the exception of get_version(), get_version_text(),\nand get_error_text(), this function MUST be called before using any other\nPortAudio API functions."},{ty:"fn",name:"terminate",path:"portaudio::pa",desc:"Library termination function - call this when finished using PortAudio.\nThis function deallocates all resources allocated by PortAudio since it was\ninitialized by a call to initialize(). In cases where initialise() has been\ncalled multiple times, each call must be matched with a corresponding call to\nterminate(). The final matching call to terminate() will automatically close\nany PortAudio streams that are still open."},{ty:"fn",name:"get_host_api_count",path:"portaudio::pa",desc:"Retrieve the number of available host APIs.\nEven if a host API is available it may have no devices available."},{ty:"fn",name:"get_default_host_api",path:"portaudio::pa",desc:"Retrieve the index of the default host API.\nThe default host API will be the lowest common denominator host API\non the current platform and is unlikely to provide the best performance."},{ty:"fn",name:"get_host_api_info",path:"portaudio::pa",desc:"Retrieve a pointer to a structure containing information about a specific host\nApi."},{ty:"fn",name:"host_api_type_id_to_host_api_index",path:"portaudio::pa",desc:"Convert a static host API unique identifier, into a runtime host API index."},{ty:"fn",name:"host_api_device_index_to_device_index",path:"portaudio::pa",desc:"Convert a host-API-specific device index to standard PortAudio device index.\nThis function may be used in conjunction with the deviceCount field of\nPaHostApiInfo to enumerate all devices for the specified host API."},{ty:"fn",name:"get_last_host_error_info",path:"portaudio::pa",desc:"Return information about the last host error encountered.\nThe error information returned by get_last_host_error_info() will never be\nmodified asynchronously by errors occurring in other PortAudio owned threads\n(such as the thread that manages the stream callback.)"},{ty:"fn",name:"get_device_count",path:"portaudio::pa",desc:"Retrieve the number of available devices. The number of available devices may\nbe zero."},{ty:"fn",name:"get_default_input_device",path:"portaudio::pa",desc:"Retrieve the index of the default input device.\nThe result can be used in the inputDevice parameter to open_stream()."},{ty:"fn",name:"get_default_output_device",path:"portaudio::pa",desc:"Retrieve the index of the default output device. The result can be\nused in the outputDevice parameter to open_stream()."},{ty:"fn",name:"get_device_info",path:"portaudio::pa",desc:"Retrieve a pointer to a PaDeviceInfo structure containing information about\nthe specified device."},{ty:"fn",name:"is_format_supported",path:"portaudio::pa",desc:"Determine whether it would be possible to open a stream with the specified\nparameters."},{ty:"fn",name:"get_sample_size",path:"portaudio::pa",desc:"Retrieve the size of a given sample format in bytes."},{ty:"fn",name:"sleep",path:"portaudio::pa",desc:"Put the caller to sleep for at least 'msec' milliseconds.\nThis function is provided only as a convenience for authors of portable code\n(such as the tests and examples in the PortAudio distribution.)"},{ty:"method",name:"new",path:"portaudio::pa",desc:"Constructor for PaStream.",parent:'18843'},{ty:"method",name:"open",path:"portaudio::pa",desc:"Opens a stream for either input, output or both.",parent:'18843'},{ty:"method",name:"open_default",path:"portaudio::pa",desc:"A simplified version of open() that opens the default input and/or output\ndevices.",parent:'18843'},{ty:"method",name:"close",path:"portaudio::pa",desc:"Closes an audio stream. If the audio stream is active it discards any\npending buffers as if abort_tream() had been called.",parent:'18843'},{ty:"method",name:"start",path:"portaudio::pa",desc:"Commences audio processing.",parent:'18843'},{ty:"method",name:"stop",path:"portaudio::pa",desc:"Terminates audio processing. It waits until all pending audio buffers\nhave been played before it returns.",parent:'18843'},{ty:"method",name:"abort",path:"portaudio::pa",desc:"Terminates audio processing immediately without waiting for pending\nbuffers to complete.",parent:'18843'},{ty:"method",name:"is_stopped",path:"portaudio::pa",desc:"Determine whether the stream is stopped.\nA stream is considered to be stopped prior to a successful call to\nstart_stream and after a successful call to stop_stream or abort_stream.\nIf a stream callback returns a value other than PaContinue the stream is\nNOT considered to be stopped.",parent:'18843'},{ty:"method",name:"is_active",path:"portaudio::pa",desc:"Determine whether the stream is active. A stream is active after a\nsuccessful call to start_stream(), until it becomes inactive either as a\nresult of a call to stop_stream() or abort_stream(), or as a result of a\nreturn value other than paContinue from the stream callback. In the latter\ncase, the stream is considered inactive after the last buffer has finished\nplaying.",parent:'18843'},{ty:"method",name:"get_stream_time",path:"portaudio::pa",desc:"Returns the current time in seconds for a stream according to the same\nclock used to generate callback PaStreamCallbackTimeInfo timestamps.\nThe time values are monotonically increasing and have unspecified origin.",parent:'18843'},{ty:"method",name:"get_stream_cpu_load",path:"portaudio::pa",desc:"Retrieve CPU usage information for the specified stream.",parent:'18843'},{ty:"method",name:"get_stream_read_available",path:"portaudio::pa",desc:"Retrieve the number of frames that can be read from the stream without\nwaiting.",parent:'18843'},{ty:"method",name:"get_stream_write_available",path:"portaudio::pa",desc:"Retrieve the number of frames that can be written to the stream without\nwaiting.",parent:'18843'},{ty:"method",name:"write",path:"portaudio::pa",desc:"Write samples to an output stream.\nThis function doesn't return until the entire buffer has been consumed\n- this may involve waiting for the operating system to consume the data.",parent:'18843'},{ty:"method",name:"get_stream_info",path:"portaudio::pa",desc:"Retrieve a PaStreamInfo structure containing information about the\nspecified stream.",parent:'18843'}];allPaths['portaudio'] = {'18731':{type:'fn',name:'get_default_output_device'},'18843':{type:'struct',name:'PaStream'},'18812':{type:'fn',name:'get_sample_size'},'18584':{type:'fn',name:'get_error_text'},'18608':{type:'fn',name:'terminate'},'18679':{type:'fn',name:'host_api_device_index_to_device_index'},'13':{type:'typedef',name:'PaDeviceIndex'},'18616':{type:'fn',name:'get_host_api_count'},'17807':{type:'struct',name:'PaStreamInfo'},'1141':{type:'enum',name:'PaStreamFlags'},'2101':{type:'enum',name:'PaError'},'1145':{type:'enum',name:'PaStreamFlags'},'11884':{type:'enum',name:'PaHostApiTypeId'},'29':{type:'typedef',name:'PaTime'},'2098':{type:'enum',name:'PaError'},'2075':{type:'enum',name:'PaError'},'2093':{type:'enum',name:'PaError'},'11870':{type:'enum',name:'PaHostApiTypeId'},'11878':{type:'enum',name:'PaHostApiTypeId'},'18600':{type:'fn',name:'initialize'},'11868':{type:'enum',name:'PaHostApiTypeId'},'15366':{type:'struct',name:'PaDeviceInfo'},'2097':{type:'enum',name:'PaError'},'2082':{type:'enum',name:'PaError'},'18550':{type:'mod',name:'pa'},'18828':{type:'fn',name:'sleep'},'2079':{type:'enum',name:'PaError'},'38':{type:'enum',name:'PaSampleFormat'},'18624':{type:'fn',name:'get_default_host_api'},'11882':{type:'enum',name:'PaHostApiTypeId'},'18565':{type:'fn',name:'get_version'},'2085':{type:'enum',name:'PaError'},'2083':{type:'enum',name:'PaError'},'2078':{type:'enum',name:'PaError'},'1149':{type:'enum',name:'PaStreamFlags'},'6':{type:'mod',name:'types'},'1139':{type:'enum',name:'PaStreamFlags'},'11872':{type:'enum',name:'PaHostApiTypeId'},'11876':{type:'enum',name:'PaHostApiTypeId'},'18573':{type:'fn',name:'get_version_text'},'11892':{type:'enum',name:'PaHostApiTypeId'},'1143':{type:'enum',name:'PaStreamFlags'},'18770':{type:'fn',name:'is_format_supported'},'36':{type:'enum',name:'PaSampleFormat'},'18723':{type:'fn',name:'get_default_input_device'},'14839':{type:'struct',name:'PaHostErrorInfo'},'42':{type:'enum',name:'PaSampleFormat'},'11880':{type:'enum',name:'PaHostApiTypeId'},'11896':{type:'enum',name:'PaHostApiTypeId'},'18715':{type:'fn',name:'get_device_count'},'26':{type:'typedef',name:'PaHostApiIndex'},'11894':{type:'enum',name:'PaHostApiTypeId'},'2105':{type:'enum',name:'PaError'},'11874':{type:'enum',name:'PaHostApiTypeId'},'2096':{type:'enum',name:'PaError'},'2099':{type:'enum',name:'PaError'},'2102':{type:'enum',name:'PaError'},'1137':{type:'enum',name:'PaStreamFlags'},'2100':{type:'enum',name:'PaError'},'2087':{type:'enum',name:'PaError'},'2104':{type:'enum',name:'PaError'},'18663':{type:'fn',name:'host_api_type_id_to_host_api_index'},'11888':{type:'enum',name:'PaHostApiTypeId'},'11886':{type:'enum',name:'PaHostApiTypeId'},'2088':{type:'enum',name:'PaError'},'46':{type:'enum',name:'PaSampleFormat'},'2092':{type:'enum',name:'PaError'},'32':{type:'enum',name:'PaSampleFormat'},'2103':{type:'enum',name:'PaError'},'18632':{type:'fn',name:'get_host_api_info'},'14730':{type:'struct',name:'PaHostApiInfo'},'2090':{type:'enum',name:'PaError'},'18739':{type:'fn',name:'get_device_info'},'16997':{type:'struct',name:'PaStreamParameters'},'44':{type:'enum',name:'PaSampleFormat'},'2089':{type:'enum',name:'PaError'},'2086':{type:'enum',name:'PaError'},'0':{type:'mod',name:'portaudio'},'1147':{type:'enum',name:'PaStreamFlags'},'18700':{type:'fn',name:'get_last_host_error_info'},'2091':{type:'enum',name:'PaError'},'34':{type:'enum',name:'PaSampleFormat'},'2081':{type:'enum',name:'PaError'},'40':{type:'enum',name:'PaSampleFormat'},'2084':{type:'enum',name:'PaError'},'2095':{type:'enum',name:'PaError'},'2080':{type:'enum',name:'PaError'},'2073':{type:'enum',name:'PaError'},'2106':{type:'enum',name:'PaError'},'2094':{type:'enum',name:'PaError'},'11890':{type:'enum',name:'PaHostApiTypeId'}};
initSearch(searchIndex);
